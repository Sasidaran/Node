{
  "name": "forms-bootstrap",
  "description": "An easy way to create, parse, and validate forms in Node and Express. Bootstrap-based HTML rendering.",
  "main": "./index",
  "author": {
    "name": "Caolan McMahon/Pradip P Caulagi/Mariusz Nowostawski"
  },
  "version": "0.0.6",
  "repository": {
    "type": "git",
    "url": "http://github.com/marni/forms-bootstrap.git"
  },
  "bugs": {
    "url": "http://github.com/marni/forms-bootstrap/issues"
  },
  "dependencies": {
    "async": ">= 0.1.15"
  },
  "devDependencies": {
    "nodeunit": ">= 0.7.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/marni/forms-bootstrap/raw/master/LICENSE"
    }
  ],
  "readme": "\n# Forms\n\nConstructing forms by hand is a lot of work. Popular frameworks like\nRuby on Rails and Django contain code to make this process easier.\nThis module is an attempt to provide the same sort of helpers for node.js \nand express, with the default bootstrap twitter rendering.\n\n\n# How to install\n\n    npm install forms-bootstrap\n\n\n## Example\n\nCreating an example registration form (in CoffeeScript):\n\n    forms = require 'forms-bootstrap'\n\n    myform = forms.create\n        name: forms.fields.string\n            required: true\n            widget: forms.widgets.text\n                placeholder: 'Your full name'\n                classes: ['span5']\n        address: forms.fields.string\n            widget: forms.widgets.textarea\n                rows: 3\n        website: forms.fields.url()\n        email: forms.fields.email()\n\n\nHandling a request:\n\n    app.post '/user/register', (req, res) ->\n        myform.handle req.body,\n            success: (form) ->\n                # do something with the data\n                console.log form.data.name\n            error: (form) ->\n                # handle the error, by re-rendering the form again\n                res.render 'user/register', form: form.toHTML()\n\n\nAnd this is how your user/register.jade template might look like:\n\n    // Your initial stuff, headers and all go here\n    .container\n        .row\n            .span10\n                h2 New user registration\n                form(action='/user/register', method='POST').form-horizontal.well\n                    != form\n                    #submit\n                    input(type='submit', value='Create').btn.btn-large\n\n\nThat's it. For more details and working examples look in the example folder.\n\nIn examples folder, run:\n * node simple-express.js\n   This one uses layout.jade and page.jade to render a simple form.\n * node complex-express.js\n   This one uses complex.jade template and showcases a more complex form.\n\n\n\n## Form passed as JSON (instead of HTML)\n\nSometimes getting the form as HTML from the server is not appropriate. \nThere is now support for rendering the form fields as JSON instead of HTML.\nThis allows easier integration with custom formatting on the client, and supports non-browser clients, too.\n\nFor the above form example, the generated JSON would look like this:\n\n  {\n    name: {id: 'id_name', help: '', value: ''},\n    address: {id: 'id_address', help: '', value: ''},\n    website: {id: 'id_website', help: '', value: ''},\n    email: {id: 'id_email', help: '', value: ''}\n  }\n \nFields, that are filled in when the data is available:\n\n    id:             # id of the element, always present\n    value:          # the element value, always present\n    help:           # help text, always\n\n    required        # is this field required?\n    placeholder:    # the placeholder value\n    label:          # label value\n    error:          # the error text if validation failed\n\n\n\n\n\n# Status and todo list\n\nStatus: development/experimental (do not use in production)\nTests: all tests pass\n\n\nTodo: \n * currently only horizontal form layout renders nicely, need to fix for vertical forms\n * tests may not cover all the use cases\n * integrate jquery and client-side form validation capabilities\n\n\n# Contribute\n\nThis module has been derived from two other modules,\nand all credits go to original project owners and contributors:\n\n * original work by coalan, https://github.com/caolan/forms\n * bootstrap extension by caulagi, https://github.com/caulagi/forms\n\nPlease contribute to the original projects with generic patches.\nFor bootstrap-specific extensions or features feel free to fork us. \nYour pull-requests warmly welcomed. \n\n\n\n# Details\n\n\n## Available types\n\nA list of the fields, widgets, validators and renderers available as part of\nthe forms module. Each of these components can be switched with customised\ncomponents following the same API.\n\n### Fields\n\n* string\n* number\n* boolean\n* array\n* password\n* email\n* url\n\n### Widgets\n\n* text\n* password\n* hidden\n* checkbox\n* select\n* textarea\n* multipleCheckbox\n* multipleRadio\n* multipleSelect\n\n### Validators\n\n* matchField\n* min\n* max\n* range\n* minLength\n* maxLength\n* rangeLength\n* regexp\n* email\n* url\n\n### Renderers\n\n* div\n* p\n* li\n* table\n\n\n## API\n\nA more detailed look at the methods and attributes available. Most of these\nyou will not need to use directly.\n\n### forms.create(fields)\n\nConverts a form definition (an object literal containing field objects) into a\nform object.\n\n\n\n\n### Form object\n\n#### Attributes\n\n* fields - Object literal containing the field objects passed to the create\n  function\n\n#### form.handle(req, callbacks)\nInspects a request or object literal and binds any data to the correct fields.\n\n#### form.bind(data)\nBinds data to correct fields, returning a new bound form object.\n\n#### form.toHTML(iterator)\nRuns toHTML on each field returning the result. If an iterator is specified,\nit is called for each field with the field name and object as its arguments,\nthe iterator's results are concatenated to create the HTML output, allowing\nfor highly customised markup.\n\n### form.clear()\nFor all fields in the form, it will set error property to undefined and value property to ''. \n\n\n### Bound Form object\n\nContains the same methods as the unbound form, plus:\n\n#### Attributes\n\n* data - Object containing all the parsed data keyed by field name\n* fields - Object literal containing the field objects passed to the create\n  function\n\n#### form.validate(callback)\nCalls validate on each field in the bound form and returns the resulting form\nobject to the callback.\n\n#### form.isValid()\nChecks all fields for an error attribute. Returns false if any exist, otherwise\nreturns true.\n\n#### form.toHTML(iterator)\nRuns toHTML on each field returning the result. If an iterator is specified,\nit is called for each field with the field name and object as its arguments,\nthe iterator's results are concatenated to create the HTML output, allowing\nfor highly customised markup.\n\n\n### Field object\n\n#### Attributes\n\n* label - Optional label text which overrides the default\n* required - Boolean describing whether the field is mandatory\n* validators - An array of functions which validate the field data\n* widget - A widget object to use when rendering the field\n* id - An optional id to override the default\n* choices - A list of options, used for multiple choice fields\n\n\n### field.clear()\n\nSets error property to undefined and value property to ''. \n\n\n#### field.parse(rawdata)\n\nCoerces the raw data from the request into the correct format for the field,\nreturning the result, e.g. '123' becomes 123 for the number field.\n\n#### field.bind(rawdata)\n\nReturns a new bound field object. Calls parse on the data and stores in the\nbound field's data attribute, stores the raw value in the value attribute.\n\n#### field.errorHTML()\n\nReturns a string containing a HTML element containing the fields error\nmessage, or an empty string if there is no error associated with the field.\n\n#### field.labelText(name)\n\nReturns a string containing the label text from field.label, or defaults to\nusing the field name with underscores replaced with spaces and the first\nletter capitalised.\n\n#### field.labelHTML(name, id)\n\nReturns a string containing a label element with the correct 'for' attribute\ncontaining the text from field.labelText(name).\n\n#### field.classes()\n\nReturns an array of default CSS classes considering the field's attributes,\ne.g. ['field', 'required', 'error'] for a required field with an error message.\n\n#### field.toHTML(name, iterator)\n\nCalls the iterator with the name and field object as arguments. Defaults to\nusing forms.render.div as the iterator, which returns a HTML representation of\nthe field label, error message and widget wrapped in a div.\n\n### Bound Field object\n\n_same as field object, but with a few extensions_\n\n#### Attributes\n\n* value - The raw value from the request data\n* data - The request data coerced to the correct format for this field\n* error - An error message if the field fails validation\n\n#### validate(callback)\n\nChecks if the field is required and whether it is empty. Then runs the\nvalidator functions in order until one fails or they all pass. If a validator\nfails, the resulting message is stored in the field's error attribute.\n\n\n### Widget object\n\n#### Attributes\n\n* classes - Custom classes to add to the rendered widget\n* type - A string representing the widget type, e.g. 'text' or 'checkbox'\n\n#### toHTML(name, field)\n\nReturns a string containing a HTML representation of the widget for the given\nfield.\n\n\n### Validator\n\nA function that accepts a bound form, bound field and a callback as arguments.\nIt should apply a test to the field to assert its validity. Once processing\nhas completed it must call the callback with no arguments if the field is\nvalid or with an error message if the field is invalid.\n\n\n### Renderer\n\nA function which accepts a name and field as arguments and returns a string\ncontaining a HTML representation of the field.\n\n",
  "_id": "forms-bootstrap@0.0.6",
  "dist": {
    "shasum": "59970105d755447f3652f88817de549180e0ec70",
    "tarball": "https://registry.npmjs.org/forms-bootstrap/-/forms-bootstrap-0.0.6.tgz"
  },
  "_npmVersion": "1.1.63",
  "_npmUser": {
    "name": "marni",
    "email": "nowostawski@gmail.com"
  },
  "maintainers": [
    {
      "name": "marni",
      "email": "nowostawski@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "59970105d755447f3652f88817de549180e0ec70",
  "_from": "forms-bootstrap@",
  "_resolved": "https://registry.npmjs.org/forms-bootstrap/-/forms-bootstrap-0.0.6.tgz"
}
